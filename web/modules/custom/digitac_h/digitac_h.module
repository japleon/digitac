<?php

/**
 * @file
 * Module file for digitac_h.
 */
use Drupal\node\Entity\Node;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\comment\CommentInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\StringTranslation;


function digitac_h_form_alter(&$form, &$form_state, $form_id) {

   if ( (str_contains($form_id,'views_form_content_page_4')) || (str_contains($form_id,'views_form_content_page_5')) || (str_contains($form_id,'views_form_content_page_6')) )
    {

          $form['agrupador_1'] = [
            '#type' => 'markup',
            '#weight' => -3,
            '#markup' => t('</div>')
          ];
   }
    
    if ($form_id == 'views_form_content_block_1'){
        $form['header']['#weight'] = 800;
        unset($form['actions']);
    }

    if ($form_id == 'views_exposed_form'){

      $form['field_noticia_tipo_target_id']['#options']['All'] = t('Tipo');
      $form['field_noticia_region_target_id']['#options']['All'] = t('Regiones');
      $form['field_noticia_tematica_target_id']['#options']['All'] = t('Temática');


      foreach($form['field_curso_target_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_target', $key);
        $counter = $query->count()->execute();
        $form['field_curso_target_target_id']['#options'][$key] .= ' ('. $counter .')';
      }

      foreach($form['field_curso_gratuidad_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_gratuidad', $key);
        $counter = $query->count()->execute();
        $form['field_curso_gratuidad_target_id']['#options'][$key] .= ' ('. $counter .')';
      }

      foreach($form['field_curso_categoria_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_categoria', $key);
        $counter = $query->count()->execute();
        $form['field_curso_categoria_target_id']['#options'][$key] .= ' ('. $counter .')';
      }

      foreach($form['field_curso_tipo_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_tipo', $key);
        $counter = $query->count()->execute();
        $form['field_curso_tipo_target_id']['#options'][$key] .= ' ('. $counter .')';
      }

      $current_time = \Drupal::time()->getCurrentTime('d');    
      $time_30 = $current_time+2592000;   
      $time_90 = $current_time+(2592000*3);   
      $time_180 = $current_time+(2592000*6);   

      $start = \Drupal::service('date.formatter')->format($current_time, 'custom', 'Y-m-d');
      $end = \Drupal::service('date.formatter')->format($time_30, 'custom', 'Y-m-d');
      
      $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_fecha_inicio', $end ,'<=')->condition('field_curso_fecha_inicio', $start ,'>');
      $counter = $query->count()->execute();
      $form['field_curso_tipo_target_id']['#options'][997]='Próximo mes ('. $counter .')';

      $end = \Drupal::service('date.formatter')->format($time_90, 'custom', 'Y-m-d');

      $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_fecha_inicio', $end ,'<=')->condition('field_curso_fecha_inicio', $start ,'>');
      $counter = $query->count()->execute();
      $form['field_curso_tipo_target_id']['#options'][998]='Próximos 3 meses ('. $counter .')';

      $end = \Drupal::service('date.formatter')->format($time_180, 'custom', 'Y-m-d');

      $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_fecha_inicio', $end ,'<=')->condition('field_curso_fecha_inicio', $start ,'>');
      $counter = $query->count()->execute();
      $form['field_curso_tipo_target_id']['#options'][999]='Próximos 6 meses ('. $counter .')';

      foreach($form['field_curso_pais_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso')->condition('field_curso_pais', $key);
        $counter = $query->count()->execute();
        $form['field_curso_pais_target_id']['#options'][$key] .= ' ('. $counter .')';
      }

      foreach($form['type']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', $key);
        $counter = $query->count()->execute();
        $form['type']['#options'][$key] .= ' ('. $counter .')';
      }

      foreach($form['field_solucion_gratuidad_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('field_solucion_gratuidad', $key);
        $counter = $query->count()->execute();
        $form['field_solucion_gratuidad_target_id']['#options'][$key] .= ' ('. $counter .')';
      }

      foreach($form['field_solucion_tipo_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('field_solucion_tipo', $key);
        $counter = $query->count()->execute();
        $form['field_solucion_tipo_target_id']['#options'][$key] .= ' ('. $counter .')';
      }

      foreach($form['field_solucion_pais_target_id']['#options'] as $key => $value){  
        $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('field_solucion_pais', $key);
        $counter = $query->count()->execute();
        $form['field_solucion_pais_target_id']['#options'][$key] .= ' ('. $counter .')';
      }



    }

}


function digitac_h_theme() {

  $theme['estado_reto_template'] = [
    'variables' => [
      'custom_text' => NULL,
      'nid' => NULL,
      'estado' => NULL,
    ],
    'template' => 'estado-reto',
  ];

    $theme['estado_idea_template'] = [
    'variables' => [
      'custom_text' => NULL,
      'nid' => NULL,
      'estado' => NULL
    ],
    'template' => 'estado-idea',
  ];

  $theme['estado_experiencia_template'] = [
    'variables' => [
      'custom_text' => NULL,
      'nid' => NULL,
      'estado' => NULL
    ],
    'template' => 'estado-experiencia',
  ];

    $theme['eliminar_comentario_template'] = [
    'variables' => [
      'com_ent_id' => NULL,
      'com_ent_bundle' => NULL
    ],
    'template' => 'eliminar-comentario',
  ];

    $theme['guardar_idea_template'] = [
    'variables' => [
      'reto_id' => NULL
    ],
    'template' => 'guardar-idea',
  ];

  $theme['guardar_experiencia_template'] = [
    'variables' => [
      'reto_id' => NULL
    ],
    'template' => 'guardar-experiencia',
  ];

  $theme['aprobar_comentario_template'] = [
    'variables' => [
      'com_ent_id' => NULL,
      'com_ent_bundle' => NULL
    ],
    'template' => 'aprobar-comentario',
  ];

    $theme['eliminar_cuenta_template'] = [
    'variables' => [
      'id' => NULL,
    ],
    'template' => 'eliminar-cuenta',
  ];

  return $theme;
}


function digitac_h_node_presave(\Drupal\Core\Entity\EntityInterface $node)  {

 if ($node->bundle() == 'reto') {
      if ( ($node->field_reto_estado->first()->getValue()['target_id']) == 13)
      { $node->status = 0;}
      else
      { $node->status = 1;} 
 }
 else if (($node->bundle() == 'idea') || ($node->bundle() == 'experiencia')) {

// cambios de estado.

    $current_user = \Drupal::currentUser()->getDisplayName(); 
    $current_time = \Drupal::time()->getCurrentTime();
    $date_output = strtoupper(date('d M y · H:i', $current_time));
    $date_output .= date('a', $current_time);

/*    if($node->isNew())
    {
      $node->field_idea_estado->target_id = 16;
    }*/

    if (($node->isNew()) || (($node->original->field_idea_estado->first()==null))|| ( (!$node->isNew()) && ( ($node->field_idea_estado->first()!=null) && ($node->original->field_idea_estado->first()!=null) && ($node->field_idea_estado->first()->getValue()['target_id']) != ($node->original->field_idea_estado->first()->getValue()['target_id']) )))
    {
      $term_name = \Drupal\taxonomy\Entity\Term::load($node->field_idea_estado->first()->getValue()['target_id'])->get('name')->value;
      $node->field_idea_cambios_estado[] = $term_name .'||'.$date_output.'||'.$current_user;
    }


/*    if ($node->isNew()) 
    { $node->status = 0;}
    else
    {*/
      if ( ($node->field_idea_estado->first()->getValue()['target_id']) == 16)
      { $node->status = 0;}
      else
      { $node->status = 1;} 
//    }

    $reto_id = \Drupal::routeMatch()->getParameter('arg_0');
    $display_id = \Drupal::routeMatch()->getParameter('display_id');
    
    if ($node->isNew()) 
      {$node->field_idea_reto->target_id= intval($reto_id);}
/*    if ($display_id == 'page_1')
      {$node->field_idea_experiencia=false;}
    else
      {$node->field_idea_experiencia=true;}*/

    if ($node->isNew()) 
    {$query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', $node->bundle());
    $counter = $query->count()->execute();
    $node->field_idea_numero=$counter+1;}

  }
}


// REDIRECT AFTER USER REGISTER
function digitac_h_form_user_register_form_alter(&$form, FormStateInterface $form_state) {

    $form['agrupador_1'] = [
            '#type' => 'markup',
            '#weight' => -3,
            '#markup' => t('<div class="name_wrapper">')
    ];

    $form['agrupador_2'] = [
            '#type' => 'markup',
            '#weight' => 1,
            '#markup' => t('</div>')
    ];


    $form['actions'] = [
      '#type' => 'button',
      '#value' => 'Registrarme',
      '#weight' => 99,
      '#ajax' => [
        'callback' => 'setMessage',
      ],
    ];
}

function setMessage(array $form, FormStateInterface $form_state) {

  $valid_errors = "";
  $response = new AjaxResponse();
  $form_valido = true;
  if(!$form_state->getValue('mail'))
  {
     $response->addCommand(new InvokeCommand('.form-item-mail', 'addClass', array('error-form-item')));
     $valid_errors .= t('El campo Mail es obligatorio<br>');
     $form_valido = false;
  }
  else
  {  $response->addCommand(new InvokeCommand('.form-item-mail', 'removeClass', array('error-form-item')));}

  if($form_state->getValue('field_usr_nombre')[0]['value']=='')
  {
     $response->addCommand(new InvokeCommand('.form-item-field-usr-nombre-0-value', 'addClass', array('error-form-item')));
     $valid_errors .= t('El campo Nombre es obligatorio<br>');
     $form_valido = false;
  }
  else
  {  $response->addCommand(new InvokeCommand('.form-item-field-usr-nombre-0-value', 'removeClass', array('error-form-item')));}

  if($form_state->getValue('field_usr_apellidos')[0]['value']=='')
  {
     $response->addCommand(new InvokeCommand('.form-item-field-usr-apellidos-0-value', 'addClass', array('error-form-item')));
     $valid_errors .= t('El campo Apellidos es obligatorio<br>');
     $form_valido = false;
  }
  else
  {  $response->addCommand(new InvokeCommand('.form-item-field-usr-apellidos-0-value', 'removeClass', array('error-form-item')));}

  if($form_state->getValue('field_usr_pais')[0]['value']=='')
  {
     $response->addCommand(new InvokeCommand('.form-item-field-usr-pais', 'addClass', array('error-form-item')));
     $valid_errors .= t('El campo País es obligatorio<br>');
     $form_valido = false;
  }
  else
  {  $response->addCommand(new InvokeCommand('.form-item-field-usr-pais', 'removeClass', array('error-form-item')));}

  if($form_state->getValue('field_usr_acepto')['value']==0)
  {
     $response->addCommand(new InvokeCommand('.form-item-field-usr-acepto-value', 'addClass', array('error-form-item')));
     $valid_errors .= t('Aceptar las condiciones de uso es obligatorio<br>');
     $form_valido = false;
  }
  else
  {  $response->addCommand(new InvokeCommand('.form-item-field-usr-acepto-value', 'removeClass', array('error-form-item')));}



  if($form_valido)
  {
    $user = \Drupal\user\Entity\User::create();

    $user->setPassword(\Drupal::service('password_generator')->generate(10));
    $user->enforceIsNew();
    $user->setEmail($form_state->getValue('mail'));
    $user->setUsername($form_state->getValue('field_usr_nombre')[0]['value'].' '.$form_state->getValue('field_usr_apellidos')[0]['value']);
    $user->set('field_usr_nombre', $form_state->getValue('field_usr_nombre')[0]['value']);
    $user->set('field_usr_apellidos', $form_state->getValue('field_usr_apellidos')[0]['value']);
    $user->set('field_usr_pais', $form_state->getValue('field_usr_pais')[0]['value']);
    $user->set('field_usr_acepto', $form_state->getValue('field_usr_acepto')['value']);
    $user->set('field_usr_empresa', $form_state->getValue('field_usr_empresa')[0]['value']);

    $violations = $user->validate();
    if (count($violations)) {
          $response->addCommand(
          new HtmlCommand(
            '.error-box',
            '<div class="title_class">' . $violations[0]->getMessage() . '</div>'),
        );
        $messages = \Drupal::messenger()->deleteAll();
    }
    else
    {          
      
    $response->addCommand(new HtmlCommand('.error-box',''));

    $result = $user->save();
    $user->activate();
    $result = $user->save();


        $mail_domain = explode('@',$form_state->getValue('mail'))[1];
        $mail_user = '***********'.substr(explode('@',$form_state->getValue('mail'))[0],-3).'@';

        $response->addCommand(
          new HtmlCommand(
            '.register__col-container',
            '<div class="title_class">' . t('¡Hola @result!', ['@result' => $form_state->getValue('field_usr_nombre')[0]['value'] ]) . '</div><div class="subtitle">'.t('Te hemos enviado un email').'</div><div class="parr">'.t('Te hemos enviado un email con un enlace a @mail para verificar tu identidad. Por favor haz click en el enlace para completar el registro.', ['@mail' => $mail_user.''.$mail_domain ]).'</div>'),
        );
    }


  }
  else{

      $response->addCommand(
          new HtmlCommand(
            '.error-box',
            '<div class="title_class">' . $valid_errors . '</div>'),
        );
 

    $messages = \Drupal::messenger()->deleteAll();
  }




//   \Drupal::service('plugin.manager.mail')->mail('user_registrationpassword', 'register_confirmation_with_pass', $form_state->getValue('mail'),'ES');
//    drupal_set_message(t('A welcome message with further instructions has been sent to your email address.'));



    
    return $response;

   }


/*function digitac_h_form_user_form_alter(&$form, FormStateInterface $form_state) {

    $form['actions'] = [
      '#type' => 'button',
      '#value' => 'Guardar contraseña',
      '#weight' => 10,
      '#ajax' => [
        'callback' => 'setMessageResetPass',
      ],
    ];
}


 function setMessageResetPass(array $form, FormStateInterface $form_state) {

    $response = new AjaxResponse();
    $userID = \Drupal::currentUser()->id();

    $response->addCommand(
      new HtmlCommand(
        '#user-form',
        '<div class="my_top_message">' . t('The PASS  is Reset. GO @result', ['@result' => $userID]) . '</div>'),
    );
    return $response;

   }*/

function digitac_h_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {


  if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {

    if($form_id == 'user_form'){

          $form['agrupador_1'] = [
            '#type' => 'markup',
            '#weight' => 3,
            '#markup' => t('<div class="box-grey">')
          ];

          $form['account']['mail']['#access'] = FALSE;

          $form['contrass'] = [
            '#type' => 'markup',
            '#weight' => 3,
            '#markup' => t('<p><strong>Contraseña</strong></p>')
          ]; 
          $form['actions']['submit']['#weight'] = 4;

          $form['agrupador_2'] = [
            '#type' => 'markup',
            '#weight' => 5,
            '#markup' => t('</div>')
          ];

    }


  }
}

function digitac_h_preprocess_user(&$variables)
{
  $session = \Drupal::request() -> getSession();
  $hash= \Drupal\Component\Utility\Crypt::hashBase64('asdfwe');

  $timestamp = \Drupal::time()->getCurrentTime();
  $session->set('pass_reset_hash', $hash);
  $session->set('pass_reset_timeout', $timestamp);
  $user = \Drupal::currentUser();
  $expiration_date = $user->getLastAccessedTime();


$form = Drupal::formBuilder()->getForm(Drupal\user\Form\UserPasswordResetForm::class, $user,$expiration_date, $hash, $timestamp);
// Add your own function before form submit here
$variables['login_form'] = Drupal::service('renderer')->renderPlain($form);

}


function digitac_h_form_user_login_form_alter(&$form, FormStateInterface $form_state) {

  $url_object = Url::fromRoute('user.pass');
  $form['password_reset_link'] = [
    '#type' => 'link',
    '#url' => $url_object,
    '#title' => new TranslatableMarkup('Olvidé la contraseña<br>'),
    '#attributes' => [
      'class' => ['user-reset-password-link'],
    ],
  ];
  $form['#submit'][] = 'digitac_h_user_login_form_submit';
}

function digitac_h_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}



function es_moderador_reto($reto_id)
{

      $reto_r = \Drupal::entityTypeManager()->getStorage('node')->load($reto_id);
      $current_user_id = \Drupal::currentUser()->id();
      $moderadores = $reto_r->field_reto_moderadores->getValue();
      $moderador_reto = false;

      foreach( $moderadores as $modera){
        if ($modera['target_id']==$current_user_id)
        {$moderador_reto = true;}
      }
      return ($moderador_reto);
}

function digitac_h_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

    if($form_id == 'node_reto_frontal_form'){

      $form['agrupador_1'] = [
        '#type' => 'markup',
        '#weight' => -9,
        '#markup' => t('<div class="box-grey"><h2>Información básica</h2>')
      ];

      $form['desc_titulo'] = [
        '#type' => 'markup',
        '#weight' => 0,
        '#markup' => t('<p>Cuanto más corto y descriptivo mejor</p>')
      ];

      $form['desc_desc'] = [
        '#type' => 'markup',
        '#weight' => 1,
        '#markup' => t('<p>Desarrolla un enunciado que resuma los objetivos del reto. Cuanto más estructurado y detallado mejor</p>')
      ];

      $form['agrupador_1_cierre'] = [
        '#type' => 'markup',
        '#weight' => 3,
        '#markup' => t('</div>')
      ];

      if ( (in_array('administrator', \Drupal::currentUser()->getRoles())) || (in_array('moderador', \Drupal::currentUser()->getRoles()))) {
      $form['tit_estado'] = [
        '#type' => 'markup',
        '#weight' => 3,
        '#markup' => t('<h2>Estado</h2><p>El estado por defecto del reto siempre es “Borrador”. Para que se vea en la plataforma debes cambiarlo a “Abierto” o “Cerrado”</p>')
      ];

      $form['tit_moderacion'] = [
        '#type' => 'markup',
        '#weight' => 4,
        '#markup' => t('<div class="box-grey"><h2>Moderación</h2><p>Debes asignar un moderador como mínimo. Todos los moderadores y expertos deben estar dados de alta en el backoffice del Gestor de Contenidos Drupal. Si alguno no te aparece aquí, debes darlo de alta allí primero para poder asignarlo.</p>')
      ];

      $form['desc_exp'] = [
        '#type' => 'markup',
        '#weight' => 6,
        '#markup' => t('<p>Los usuarios expertos no son moderadores. Son usuarios reconocidos, que ayudan a dinamizar el reto y la plataforma en general.</p></div><h2>Tags</h2><p>También puedes asignar tags al reto para que los usuarios puedan asignarlas a sus ideas. Para que tre aparezcan aquí las tags, deben darse de alta previamente en el backoffice del gestor de contenidos Drupal.</p>')
      ];

      $form['tit_dates'] = [
        '#type' => 'markup',
        '#weight' => 7,
        '#markup' => t('<div class="box-grey"><h2>Programar fechas</h2><p>Si lo deseas, puedes programar un comienzo y un fin para este reto. Si programas la finalización, al finalizar cambiará de estado automáticamente a “Cerrado”.</p>')
      ];

      $form['tit_config'] = [
        '#type' => 'markup',
        '#weight' => 9,
        '#markup' => t('</div><div class="box-switch"><h2>Configuración</h2><p>Por defecto todas las siguientes opciones están activas. Puedes desactivarlas en función de los objetivos del reto que estás creando.</p>')
      ];
    
      $form['tit_config_2'] = [
        '#type' => 'markup',
        '#weight' => 19,
        '#markup' => t('</div>')
      ];
      };


      unset($form['actions']['delete']);

      $form['actions']['submit_cancel'] = array (
        '#type' => 'submit',
        '#weight' => 20,
        '#attributes' => array('class' => array('clase-customizada-secondary-button')),
        '#value' => t('Cancelar'),
        '#submit' => array('new_reto_cancel_handler'),
        '#limit_validation_errors' => [],
        '#prefix' => '<div class="button-wrapper">'
      );

      $form['revision_information']['#access'] = FALSE;
      
      $form['actions']['submit']['#submit'][]= 'new_reto_submit_handler';
      $form['actions']['submit']['#weight']=99;
      $form['actions']['submit']['#value']=t('Guardar reto');
      $form['actions']['submit']['#suffix'] = '</div>';


    }

  if($form_id == 'node_idea_frontal_form'){

      $idea_id = explode('nid=',$_SERVER['REQUEST_URI'])[1];
      $idea_id = explode('&',$idea_id)[0];

      if ($idea_id!=null)
      {
      $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
      $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
      }
      else
      { $reto_id = \Drupal::routeMatch()->getParameter('arg_0');}

      $moderador_reto = es_moderador_reto($reto_id);

      $form['agrupador_1'] = [
        '#type' => 'markup',
        '#weight' => -9,
        '#markup' => t('<div class="box-grey">')
      ];


        $form['desc_titulo'] = [
        '#type' => 'markup',
        '#weight' => 0,
        '#markup' => t('<p>Cuanto más corto y descriptivo mejor</p>')
      ];

      $form['desc_desc'] = [
        '#type' => 'markup',
        '#weight' => 1,
        '#markup' => t('<p>Desarrolla un enunciado que resuma bien la idea propuesta. Cuanto más estructurado y detallado mejor</p>')
      ];

      $form['desc_tags'] = [
        '#type' => 'markup',
        '#weight' => 3,
        '#markup' => t('<p>Selecciona las tags que tengan relación con tu idea: Puedes dejar este campo vacío.</p>')
      ];
      
      $form['tit_rel_ideas'] = [
        '#type' => 'markup',
        '#weight' => 4,
        '#markup' => t('</div><h2>Relacionar ideas</h2><p>Selecciona las ideas que tengan relación con la tuya. Puedes no seleccionar ninguna.</p>')
      ];

      if ($moderador_reto) {
      $form['tit_estado'] = [
        '#type' => 'markup',
        '#weight' => 5,
        '#markup' => t('<h2>Estado</h2><p>El estado por defecto de la idea siempre es “Borrador”. Para que se vea en la plataforma debes cambiarlo a “Abierto”, “Cerrado” o "En evaluación".</p>')
      ];
      }
      else{
        $form['field_idea_estado']=null;
      }


      if ( (!(in_array('administrator', \Drupal::currentUser()->getRoles()))) && (!(in_array('moderador', \Drupal::currentUser()->getRoles())))) {
      $form['tit_aviso'] = [
        '#type' => 'markup',
        '#weight' => 9,
        '#markup' => t('<div class="aviso">La idea no se verá instantáneamente en la plataforma. Un moderador deberá aprobarla primero.</div>')
      ];
      }

      $form['actions']['submit_cancel'] = array (
        '#type' => 'submit',
        '#weight' => 9,
        '#attributes' => array('class' => array('clase-customizada-secondary-button')),
        '#value' => t('Cancelar'),
        '#submit' => array('new_idea_cancel_handler'),
        '#limit_validation_errors' => [],
        '#prefix' => '<div class="button-wrapper">'
      );

      unset($form['meta']);
      $form['revision_information']['#access'] = FALSE;
      $form['actions']['submit']['#submit'][]= 'new_idea_submit_handler';
      $form['actions']['submit']['#weight']=99;
      $form['actions']['submit']['#value']=t('Guardar idea');
      $form['actions']['submit']['#suffix'] = '</div>';

  }

    if($form_id == 'node_experiencia_frontal_form'){

      $idea_id = explode('nid=',$_SERVER['REQUEST_URI'])[1];

      if ($idea_id!=null)
      {
      $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
      $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
      }
      else
      { $reto_id = \Drupal::routeMatch()->getParameter('arg_0');}

      $moderador_reto = es_moderador_reto($reto_id);


      $form['agrupador_1'] = [
        '#type' => 'markup',
        '#weight' => -9,
        '#markup' => t('<div class="box-grey">')
      ];

        $form['desc_titulo'] = [
        '#type' => 'markup',
        '#weight' => 0,
        '#markup' => t('<p>Cuanto más corto y descriptivo mejor</p>')
      ];

      $form['desc_desc'] = [
        '#type' => 'markup',
        '#weight' => 1,
        '#markup' => t('<p>Desarrolla un enunciado que resuma bien la experiencia propuesta. Cuanto más estructurado y detallado mejor</p>')
      ];

      $form['desc_tags'] = [
        '#type' => 'markup',
        '#weight' => 3,
        '#markup' => t('<p>Selecciona las tags que tengan relación con tu experiencia: Puedes dejar este campo vacío.</p>')
      ];
      
      $form['tit_rel_experiencia'] = [
        '#type' => 'markup',
        '#weight' => 5,
        '#markup' => t('</div><h2>Relacionar experiencias</h2><p>Selecciona las experiencias que tengan relación con la tuya. Puedes no seleccionar ninguna.</p>')
      ];

      if ($moderador_reto) {
      $form['tit_estado'] = [
        '#type' => 'markup',
        '#weight' => 6,
        '#markup' => t('<h2>Estado</h2><p>El estado por defecto de la experiencia siempre es “Borrador”. Para que se vea en la plataforma debes cambiarlo a “Abierto”, “Cerrado” o "En evaluación".</p>')
      ];
      }
      else{
        $form['field_idea_estado']=null;
      }

      $form['actions']['submit_cancel'] = array (
        '#type' => 'submit',
        '#weight' => 9,
        '#attributes' => array('class' => array('clase-customizada-secondary-button')),
        '#value' => t('Cancelar'),
        '#submit' => array('new_experiencia_cancel_handler'),
        '#limit_validation_errors' => [],
        '#prefix' => '<div class="button-wrapper">'
      );

      unset($form['meta']);
      $form['revision_information']['#access'] = FALSE;

      $form['actions']['submit']['#submit'][]= 'new_experiencia_submit_handler';
      $form['actions']['submit']['#weight']=99;
      $form['actions']['submit']['#value']=t('Guardar experiencia');
      $form['actions']['submit']['#suffix'] = '</div>';
    
  }


}

function new_reto_submit_handler($form, &$form_state) {
  $form_state->setRedirect('entity.node.canonical', ['node' => 65]);
}
function new_idea_submit_handler($form, &$form_state) {
//  $form_state->setRedirect('entity.node.canonical', ['node' => '77']);
    $curr_rou = explode('/',\Drupal::service('path.current')->getPath());
    $redirect_path = "/guardar-idea/".$curr_rou[2];
    $url = url::fromUserInput($redirect_path);
    $form_state->setRedirect($url->getRouteName(),$url->getRouteParameters());
}
function new_experiencia_submit_handler($form, &$form_state) {
//  $form_state->setRedirect('entity.node.canonical', ['node' => 79]);
    $curr_rou = explode('/',\Drupal::service('path.current')->getPath());
    $redirect_path = "/guardar-experiencia/".$curr_rou[2];
    $url = url::fromUserInput($redirect_path);
    $form_state->setRedirect($url->getRouteName(),$url->getRouteParameters());
}
function new_idea_cancel_handler($form, &$form_state) {
   $curr_rou = explode('/',\Drupal::service('path.current')->getPath());
   $form_state->setRedirect('entity.node.canonical',['node' => $curr_rou[2]]);
}
function new_experiencia_cancel_handler($form, &$form_state) {
   $curr_rou = explode('/',\Drupal::service('path.current')->getPath());
   $form_state->setRedirect('entity.node.canonical',['node' => $curr_rou[2]]);
}
function new_reto_cancel_handler($form, &$form_state) {
    $redirect_path = "/retos";
    $url = url::fromUserInput($redirect_path);
    $form_state->setRedirect($url->getRouteName(),$url->getRouteParameters());
}



function digitac_h_preprocess_node(&$vars) {
  $vars['param']['start'] = $_GET['start'];
  $vars['param']['end'] = $_GET['end'];
  $vars['param']['pais'] = $_GET['pais'];

  if (($vars['node']->getType() == 'idea')||($vars['node']->getType() == 'experiencia')) 
  {
    $reto_id = $vars['node']->field_idea_reto->getValue()[0]['target_id'];
    $reto_r = \Drupal::entityTypeManager()->getStorage('node')->load($reto_id);
    $vars['tiene_comentarios']= $reto_r->field_reto_comentarios->getValue()[0]['value'];
    $vars['tiene_votacion']= $reto_r->field_reto_votacion->getValue()[0]['value'];
    $vars['es_moderador']= es_moderador_reto($reto_id);
    $vars['reto_cerrado']= ($reto_r->field_reto_estado->getValue()[0]['target_id'] == 15);
    $vars['idea_cerrada']= ($vars['node']->field_idea_estado->getValue()[0]['target_id'] == 19);


    $date_formatter = \Drupal::service('date.formatter');
    $currTime = \Drupal::time()->getCurrentTime();
    $creatTime = $vars['node']->getCreatedTime();
    $vars['hence'] = $date_formatter->formatDiff($creatTime, $currTime, [
    'granularity' => 1,
    'return_as_object' => TRUE,
  ])->toRenderable();

  }

  if ($vars['node']->getType() == 'reto') 
  {
    $reto_id = $vars['node']->Id();
    $reto_r = \Drupal::entityTypeManager()->getStorage('node')->load($reto_id);
    $vars['tiene_comentarios']= $reto_r->field_reto_comentarios->getValue()[0]['value'];
    $vars['tiene_votacion']= $reto_r->field_reto_votacion->getValue()[0]['value'];
    $vars['es_moderador']= es_moderador_reto($reto_id);
    $vars['esta_cerrado']= ($reto_r->field_reto_estado->getValue()[0]['target_id'] == 15);
  }



}


function digitac_h_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->getEntityTypeId() == 'comment') {
    
    $operations=[];
    $operations['aprobar_comentario'] = [
      'title' => t('Aprobar'),
      'url' => Url::fromRoute('comment.approve', ['comment' => $entity->id()]),
      'weight' => 99950,
      'query' => [
        'destination' => '/admin-comentarios'
      ]
    ]; 
    return $operations;
  }
}

function digitac_h_views_query_alter(&$view,$query) {
   
  $viewId = $view->id();

  if ($viewId == 'comment') {
        if ($view->current_display == 'page_1'){

          $current_user_id = \Drupal::currentUser()->id();
          $query_retos = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'reto')->condition('field_reto_moderadores', $current_user_id)->accessCheck(TRUE);
          $results_retos = $query_retos->execute();
 
          foreach($results_retos as $reto_r){

            $query_ideas = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'idea')->condition('field_idea_reto', $reto_r)->accessCheck(TRUE);
            $results_ideas = $query_ideas->execute();
      
            foreach($results_ideas as $idea_r){
              $query->addWhere(0, 'node_field_data_comment_field_data.nid', $idea_r, '=');
            }

          }
          $query->where[0]["type"]='OR';

        }
  }

  if ($viewId == 'estadisticas') {

      if ($view->current_display == 'block_1'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node_field_data_created"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":node_field_data_created1"];
      }
      if ($view->current_display == 'block_2'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node_field_data_created2"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":node_field_data_created3"];
      }
      if ($view->current_display == 'block_3'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node_field_data_created4"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":node_field_data_created5"];
      }
      if ($view->current_display == 'block_7'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node_field_data_created12"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":node_field_data_created13"];
      }

      unset($query->where[0]["conditions"][0]);
      unset($query->where[0]["conditions"][1]);

  }
  if ($viewId == 'estadisticas_usuarios') {
      if ($view->current_display == 'block_4'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node_field_data_created6"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":node_field_data_created7"];
      if ($query->where[0]["conditions"][2]["value"] == 'null')
          {unset($query->where[0]["conditions"][2]);}
      }
      if ($view->current_display == 'block_5'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node_field_data_created8"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":node_field_data_created9"];
      if ($query->where[0]["conditions"][2]["value"] == 'null')
          {unset($query->where[0]["conditions"][2]);}
      }
      if ($view->current_display == 'block_6'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":node_field_data_created10"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":node_field_data_created11"];
      if ($query->where[0]["conditions"][2]["value"] == 'null')
          {unset($query->where[0]["conditions"][2]);}
      }

      unset($query->where[0]["conditions"][0]);
      unset($query->where[0]["conditions"][1]);

    }

  if ($viewId == 'estadisticas_comentarios') {
      if ($view->current_display == 'block_1'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":comment_field_data_created"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":comment_field_data_created1"];
      }
      if ($view->current_display == 'block_2'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":comment_field_data_created2"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":comment_field_data_created3"];
      if ($query->where[0]["conditions"][2]["value"] == 'null')
          {unset($query->where[0]["conditions"][2]);}

      }

      unset($query->where[0]["conditions"][0]);
      unset($query->where[0]["conditions"][1]);

  }

    if ($viewId == 'estadisticas_soluciones') {
      if ($view->current_display == 'block_4'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":votingapi_result_timestamp"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":votingapi_result_timestamp1"];
      }
      if ($view->current_display == 'block_1'){
      $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":votingapi_result_timestamp2"];
      $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":votingapi_result_timestamp3"];
      }

      unset($query->where[0]["conditions"][0]);
      unset($query->where[0]["conditions"][1]);

    }

    if ($viewId == 'user_admin_people') {
        if ($view->current_display == 'block_1'){
          $contextualFilterDate = $query->where[0]["conditions"][0]["value"][":users_field_data_created"];
          $contextualFilterDate_2 = $query->where[0]["conditions"][1]["value"][":users_field_data_created1"];

          if ($query->where[0]["conditions"][2]["value"] == 'null')
          {unset($query->where[0]["conditions"][2]);}
        
          unset($query->where[0]["conditions"][0]);
          unset($query->where[0]["conditions"][1]);

        }

    }




      if (($contextualFilterDate!='null') && ($contextualFilterDate_2!='null'))
      {
        $submittedDate = $contextualFilterDate;
        $newdate = new DateTime($submittedDate);
        $unixts = $newdate->getTimestamp();

        $submittedDate_2 = $contextualFilterDate_2;
        $newdate_2 = new DateTime($submittedDate_2);
        $unixts_2 = $newdate_2->getTimestamp();

        if (($viewId == 'estadisticas') || ($viewId == 'estadisticas_usuarios')) {
          $query->addWhere(0, 'node_field_data.created', $unixts, '>=');
          $query->addWhere(0, 'node_field_data.created', $unixts_2 , '<');
        }     
        if ($viewId == 'estadisticas_comentarios'){
          $query->addWhere(0, 'comment_field_data.created', $unixts, '>=');
          $query->addWhere(0, 'comment_field_data.created', $unixts_2 , '<');
        } 
        if ($viewId == 'estadisticas_soluciones'){
          $query->addWhere(0, 'votingapi_result_node_field_data.timestamp', $unixts, '>=');
          $query->addWhere(0, 'votingapi_result_node_field_data.timestamp', $unixts_2 , '<');
        }         
        if ($viewId == 'user_admin_people') {
          if ($view->current_display == 'block_1'){
            $query->addWhere(0, 'users_field_data.created', $unixts, '>=');
            $query->addWhere(0, 'users_field_data.created', $unixts_2 , '<');
          }
        }

      }
      else
      { 
        if (($viewId == 'estadisticas') || ($viewId == 'estadisticas_usuarios') || ($viewId == 'estadisticas_soluciones')){
          $query->addWhere(0, 'node_field_data.status', '1', '=');
        }     
        if ($viewId == 'estadisticas_comentarios'){
          $query->addWhere(0, 'comment_field_data.status', '1', '=');
        } 
        if ($viewId == 'user_admin_people') {
          if ($view->current_display == 'block_1'){
            $query->addWhere(0, 'users_field_data.status', '1', '=');
          }
        }
    
      }

  if ($viewId == 'cursos') {
    if ($view->current_display == 'block_2'){

      $fecha_cond=0;
      $fecha_key=0;

      foreach ($query->where[1]['conditions'] as $key=>$cond)
      {

        if ((is_array($cond['value'])) && ((reset($cond['value'])==997) || (reset($cond['value'])==998) || (reset($cond['value'])==999)))
        { 
          $fecha_cond=997;
          unset($query->where[1]['conditions'][$key]);
        }
        if (str_contains($cond['field'],'field_curso_fecha_inicio'))
        {
          $fecha_key = $key;
        }
      } 

      $currentDate = date('Y-m-d');
      $final="";
      if ($fecha_cond==997)
      { $final = date("Y-m-d", strtotime("+1 month", strtotime($currentDate)));}

      if ($fecha_cond==998)
      { $final = date("Y-m-d", strtotime("+3 month", strtotime($currentDate)));}

      if ($fecha_cond==999)
      { $final = date("Y-m-d", strtotime("+6 month", strtotime($currentDate)));}

      if ($final!='')
      {$query->where[1]['conditions'][$fecha_key]['field']="DATE_FORMAT(node__field_curso_fecha_inicio.field_curso_fecha_inicio_value, '%Y-%m-%d') BETWEEN DATE_FORMAT('".$currentDate."T00:00:00', '%Y-%m-%d') AND DATE_FORMAT('".$final."T00:00:00', '%Y-%m-%d')";}

    }
  }

}


function digitac_h_preprocess_views_view(&$variables)
{
  
  $view = $variables['view'];
  if (($view->id() == 'cursos') && ($view->current_display == 'block_1') )
  {
      $term = Term::load($view->args[0]);
      $variables['viewcat'] = $term->getName(); 
      $variables['viewimg'] = ($term->get('field_tx_cat_curso_imagen')->entity!=null)?$term->get('field_tx_cat_curso_imagen')->entity->getFileUri():''; 
  }

  if ($view->id() == 'distributivas') 
  {
        $curr_rou = explode('/',\Drupal::service('path.current')->getPath());
        $curr_rou_2 = explode('#',$curr_rou[2]);
        $reto_id = $curr_rou_2[0];
        $reto_n = \Drupal::entityTypeManager()->getStorage('node')->load($reto_id);    
        $variables['reto_cerrado']= ($reto_n->field_reto_estado->getValue()[0]['target_id'] == 15);
  }

}

function digitac_h_preprocess_views_view_fields(&$variables)
{

  $view = $variables['view'];

  if (($view->id() == 'distributivas'))
  {
    $reto_r = \Drupal::entityTypeManager()->getStorage('node')->load($view->args[0]);
    $variables['tiene_comentarios']= $reto_r->field_reto_comentarios->getValue()[0]['value'];
    $variables['tiene_votacion']= $reto_r->field_reto_votacion->getValue()[0]['value'];
  }
  else if (($view->id() == 'view_retos') && ($view->current_display == 'block_2') )
  {
      $curr_rou_ = \Drupal::service('path.current')->getPath();
      $curr_rou = explode('/',$curr_rou_);

      if ($curr_rou[1]=="node")
      {
        $curr_alias = explode('/',\Drupal::service('path_alias.manager')->getAliasByPath($curr_rou_));
        $variables['tab_sel'] = $curr_alias[1];
      }
      else
      {$variables['tab_sel'] = $curr_rou[1];}
  }

}


function digitac_h_preprocess_views_view_unformatted(&$variables)
{
  $view = $variables['view'];

  if (($view->id() == 'cursos') && ($view->current_display == 'block_1') )
  {
      $term = Term::load($view->args[0]);
      $variables['viewcat'] = $term->getName(); 
      $variables['viewimg'] = ($term->get('field_tx_cat_curso_imagen')->entity!=null)?$term->get('field_tx_cat_curso_imagen')->entity->getFileUri():''; 
  }

  if (($view->id() == 'estadisticas_soluciones') && ($view->current_display == 'block_1') )
  {
    $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'curso' )->condition('status', 1 );
    $counter = $query->count()->execute();
    $variables['numcursos']=$counter;
  }

  if (($view->id() == 'estadisticas_soluciones') && ($view->current_display == 'block_4') )
  {
    $query = \Drupal::entityQuery('node')->accessCheck(TRUE)->condition('type', 'tramite' )->condition('status', 1 );
    $counter = $query->count()->execute();
    $variables['numtramites']=$counter;
  }

}

//COMMENTS

function digitac_h_comment_links_alter(array &$links, CommentInterface $comment, array &$context) {

  $content_type = $context['commented_entity']->bundle();
  $comment_type = $comment->bundle();


  if ((($content_type == 'idea')||($content_type == 'experiencia')) && ($comment_type == 'comment')) {
    
    $cr_user = \Drupal::currentUser();
    $cm_user = $comment->getOwner();

    if ($cm_user->id() != $cr_user->id())
    {
      unset($links['comment']['#links']['comment-edit']);
      unset($links['comment']['#links']['comment-delete']);
      unset($links['comment']['#links']['comment-reply']['url']);
      $links['comment']['#links']['comment-reply']['attributes'] = [ 'type' => 'reply', 'id' => $comment->id()];

    }
    else{

      unset($links['comment']['#links']['comment-reply']);
      unset($links['comment']['#links']['comment-delete']['url']);
      $links['comment']['#links']['comment-delete']['attributes'] = [ 'type' => 'delete', 'id' => $comment->id()];

    }
    
    if ($comment->getParentComment() != null){
      unset($links['comment']['#links']['comment-reply']);
    }

    unset($links['comment']['#links']['comment-approve']);
     
  }
}

function digitac_h_preprocess_comment(&$variables)
{

    $date_formatter = \Drupal::service('date.formatter');
    $currTime = \Drupal::time()->getCurrentTime();
    $creatTime = explode(',', $variables['submitted']->getArguments()["@datetime"]);
    $timestamp = strtotime(str_replace('/','-',str_replace('-','',$creatTime[1])));

    $variables['hence'] = $date_formatter->formatDiff($timestamp, $currTime, [
    'granularity' => 1,
    'return_as_object' => TRUE,
  ])->toRenderable();


 $variables['reply_form']='';
if ($variables['comment']->get('pid')->target_id == null)
{

$pido= intval($variables['comment']->id());

  $values = array(
      'entity_type' => 'node',
      'entity_id' => $variables['commented_entity']->id(),
      'field_name' => 'field_idea_comentarios',
      'comment_type' => 'comment',
      'pid' =>  $pido,
      'field_comm_p_id' => $variables['comment']->id(),

    );

  $commento = \Drupal::entityTypeManager()->getStorage('comment')->create($values);
  $form = \Drupal::service('entity.form_builder')->getForm($commento,'default');
  $variables['reply_form']=$form;

//  $variables['reply_form']['actions']['submit']['#value']=t('Send comment');
//  dpm($variables['reply_form']['actions']['submit']);

}

}

function digitac_h_entity_presave(&$variables) {
  if ($variables->bundle()=='comment')
  {
    
    $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($variables->get('entity_id')->target_id);
    $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];

    if (es_moderador_reto($reto_id))
    {  $variables->status = 1;}
    else{
      $messages = \Drupal::messenger()->deleteAll();
      $messages = \Drupal::messenger()->addMessage(t('Mensaje en proceso de revision.'));
    }

        

//      dpm($variables->get('field_comm_p_id')->value);
//    $variables->set('pid',48);
//      $variables->pid[]=48;
//      dpm($variables->pid);
//      dpm($variables); 
  }

}

function digitac_h_preprocess_paragraph(&$variables) {
  
  if ($variables['paragraph']->getType() === 'usuario_stats')
  {
    $variables['usuario'] = $variables['user'];
  }
  else if ($variables['paragraph']->getType() === 'cabecera')
  {  
    $reto_id = explode('/',\Drupal::service('path.current')->getPath());
    if (($reto_id[4]) && ($reto_id[1]=='estado-idea'))
    {
      $variables['paragraph']->set('field_pg_cab_secc_target_volver','/admin-ideas/'.$reto_id[4]);
      $variables['paragraph']->save();
    }
    if (($reto_id[4]) && ($reto_id[1]=='estado-experiencia'))
    {
      $variables['paragraph']->set('field_pg_cab_secc_target_volver','/admin-experiencias/'.$reto_id[4]);
      $variables['paragraph']->save();
    }
  }

}

function digitac_h_preprocess_page(&$variables) {
      if (\Drupal::routeMatch()->getRouteName() == "user.reset")
      {
        $variables['proc'] =explode('proc=',$_SERVER['REQUEST_URI'])[1];
      }
}


function digitac_h_preprocess_field(&$variables) {

  if($variables['field_type']=='comment')
  {
        $curr_rou = explode('/',\Drupal::service('path.current')->getPath());
        $idea_id = $curr_rou[2];
        $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
        $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
        $reto_n = \Drupal::entityTypeManager()->getStorage('node')->load($reto_id);
    
        $variables['reto_cerrado']= ($reto_n->field_reto_estado->getValue()[0]['target_id'] == 15);
        $variables['idea_cerrada']= ($idea_n->field_idea_estado->getValue()[0]['target_id'] == 19);

  }

}


function digitac_h_preprocess_links(&$variables) {
  if($variables['theme_hook_original']=='links__comment')
  {
        $curr_rou = explode('/',\Drupal::service('path.current')->getPath());
        $idea_id = $curr_rou[2];
        $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
        $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
        $reto_n = \Drupal::entityTypeManager()->getStorage('node')->load($reto_id);
    
        $variables['reto_cerrado']= ($reto_n->field_reto_estado->getValue()[0]['target_id'] == 15);
        $variables['idea_cerrada']= ($idea_n->field_idea_estado->getValue()[0]['target_id'] == 19);

  }
}


function digitac_h_preprocess_fieldset(&$variables)
{
  if( ($variables['element']['#options']==null) || (count($variables['element']['#options'])==0))
  {
    if ($variables['legend']['title']['#markup']=='Ideas relacionadas')
    {$variables['prefix']= t('<div class="empty_fieldset">Todavía no hay ideas para relacionar</div>');}
    else if ($variables['legend']['title']['#markup']=='Experiencias relacionadas')
    {$variables['prefix']= t('<div class="empty_fieldset">Todavía no hay experiencias para relacionar</div>');}
  }
}


function digitac_h_preprocess_field__field_idea_ideas_relacionadas(&$variables) {
\Drupal::logger('my_module')->error("AAAAAAA");
dpm($variables);
//ideas_relacionadas
}



function digitac_h_views_pre_build(\Drupal\views\ViewExecutable $view) {

if ($view->id() == 'ideas_relacionadas' && $view->getDisplay()->display['id'] == 'entity_reference_1')
{

  $curr_rou = $_SERVER['REQUEST_URI'];
  
  if (str_contains($curr_rou,'nueva-idea'))
  {
    $reto_id = explode('/',$curr_rou)[2];
    $view->filter['field_idea_reto_target_id']->value = ["min" => "","max" => "","value" => $reto_id];
  }
  else if (str_contains($curr_rou,'editar-idea'))
  {
    $idea_id = explode('nid=',$curr_rou)[1];
    $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
    $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
    $view->filter['field_idea_reto_target_id']->value = ["min" => "","max" => "","value" => $reto_id];
  }
  else if (str_contains($curr_rou,'node'))
  {
    $idea_id = explode('/',$curr_rou)[2];
    $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
    $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
    $view->filter['field_idea_reto_target_id']->value = ["min" => "","max" => "","value" => $reto_id];
  }
  
}

if ($view->id() == 'ideas_relacionadas' && $view->getDisplay()->display['id'] == 'entity_reference_2')
{

  $curr_rou = $_SERVER['REQUEST_URI'];
  
  if (str_contains($curr_rou,'nueva-experiencia'))
  {
    $reto_id = explode('/',$curr_rou)[2];
    $view->filter['field_idea_reto_target_id']->value = ["min" => "","max" => "","value" => $reto_id];
  }
  else if (str_contains($curr_rou,'editar-experiencia'))
  {
    $idea_id = explode('nid=',$curr_rou)[1];
    $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
    $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
    $view->filter['field_idea_reto_target_id']->value = ["min" => "","max" => "","value" => $reto_id];
  }
  else if (str_contains($curr_rou,'node'))
  {
    $idea_id = explode('/',$curr_rou)[2];
    $idea_n = \Drupal::entityTypeManager()->getStorage('node')->load($idea_id);
    $reto_id = $idea_n->field_idea_reto->getValue()[0]['target_id'];
    $view->filter['field_idea_reto_target_id']->value = ["min" => "","max" => "","value" => $reto_id];
  }
  
}



}
