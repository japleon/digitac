{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph-' ~ paragraph.bundle|clean_class,
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}

  <div {{ attributes.addClass(classes) }}>

    {% block content %}
    <div class="container">
      <div class="paragraph-pg-claim__box">
        <div class="title title-xl">
          {{ content.field_pg_claim_supertitulo}}
        </div>
        <div class="title">
          {{ content.field_pg_claim_titulo}}
        </div>
        <div class="subtitle">
          {{ content.field_pg_claim_subtitulo}}
        </div>
        <a href="{{ content.field_pg_claim_boton_enlace.0}}" class="btn btn--primary btn--primary--icon">{{ content.field_pg_claim_boton_texto.0}}</a>
      </div>

      <div class="paragraph-pg-claim__image">
        <svg xmlns="http://www.w3.org/2000/svg" width="497" height="401" fill="none">
          <clipPath id="clip-path2">
            <rect width="98.495" height="264.672" x=".913" y="195.207" fill="#D9D9D9" rx="49.247" transform="rotate(-43.39 .913 195.207)"/>
            <rect width="98.495" height="248.996" x="254" y="93.663" fill="#D9D9D9" rx="49.247" transform="rotate(-43.39 254 93.663)"/>
            <rect width="98.495" height="458.387" x="55" y="67.663" fill="#D9D9D9" rx="49.247" transform="rotate(-43.39 55 67.663)"/>
          </clipPath>
          <image clip-path="url(#clip-path2)" xlink:href="{{ content.field_pg_claim_imagen.0['#markup']}}" alt="Image" class="svg__image">
        </svg>

      </div>


    </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
